<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="/css/styles.css" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <title>Dashboard</title>
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
</head>

<body class="bg-green-100">
  <div class="min-h-screen flex flex-col items-center">
    <div class="w-full bg-white px-4 py-2 shadow-lg flex justify-between items-center">
      <h1 class="text-2xl font-bold"><%= username %>'s Dashboard</h1>
      <div class="flex items-center space-x-4">
<!-- Add link for notifications with a marker -->
<a href="/notifications" class="text-green-500 relative" id="notifications-link">
  Notifications
  <!-- Add a small red mark for new notifications -->
  <% if (hasNewNotifications) { %>
    <span class="absolute h-2 w-2 bg-red-500 rounded-full top-0 right-0"></span>
  <% } %>
</a>
        <form action="/logout" method="POST">
          <button type="submit" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600">Logout</button>
        </form>
      </div>
    </div>
    
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-2xl w-full mb-8 mt-4">
      <h2 class="text-2xl font-bold mb-4">Create a Note</h2>
      <form action="/create-note" method="POST" class="space-y-4" id="create-note-form">
        <input type="text" name="title" placeholder="Title"
          class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500" required>
        <input type="text" name="description" placeholder="Description"
          class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500" required>
        <input type="text" name="tag" placeholder="Tag"
          class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500" required>
        <div class="flex justify-between items-center">
          <button type="submit"
            class="w-1/2 px-4 py-2 mx-2 bg-green-500 text-white rounded-lg hover:bg-green-600">Create Note</button>
        </div>
      </form>
    </div>
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-2xl w-full">
      <h2 class="text-2xl font-bold mb-4">Your Notes</h2>
      <div class="space-y-4">
        <% notes.forEach(note=> { %>
          <div class="border rounded-lg p-4 shadow" id="note-<%= note._id %>">
            <h3 class="text-xl font-bold">
              <%= note.title %>
            </h3>
            <p class="text-gray-700">
              <%= note.description %>
            </p>
            <p class="text-gray-500 text-sm">
              <%= note.tag %>
            </p>
            <p class="text-gray-400 text-xs">
              Created on: <%= note.createdAt.toLocaleString() %>
                <% if (note.updatedAt) { %>
                  <br>
                  Updated on: <%= note.updatedAt.toLocaleString() %>
                    <% } %>
            </p>
            <div class="flex items-center mt-4">
              <button class="text-green-500 mr-2" onclick="toggleButtons(this)">
                 <span class="material-symbols-outlined">
                  edit
                </span>
              </button>
              <div class="toggle-buttons flex items-center space-x-2 hidden">
                <form action="/update-note" method="POST" class="space-y-2 w-full">
                  <input type="hidden" name="id" value="<%= note._id %>">
                  <input type="text" name="title" placeholder="Title" value="<%= note.title %>"
                    class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500">
                  <input type="text" name="description" placeholder="Description" value="<%= note.description %>"
                    class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500">
                  <div class="flex justify-between">
                    <button type="submit"
                      class="w-1/2 px-4 py-2 mx-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600">Update
                      Note</button>
                    <button type="button" onclick="deleteNote('<%= note._id %>')"
                      class="w-1/2 px-4 py-2 mx-2 bg-red-500 text-white rounded-lg hover:bg-red-600">Delete
                      Note</button>
                  </div>
                </form>
              </div>
            </div>
          </div>
          <% }) %>
      </div>
    </div>
  </div>
  <footer class="bg-gray-900 text-white text-center py-4 mt-4">
    <p>&copy; 2024 Your Website. All rights reserved.</p>
  </footer>

  <!-- Toast Container -->
  <div id="toast-container" class="fixed bottom-4 right-4 space-y-4"></div>

  <script>
    function toggleButtons(button) {
      const toggleButtons = button.closest('.flex').querySelector('.toggle-buttons');
      toggleButtons.classList.toggle('hidden');
    }

    async function deleteNote(noteId) {
      if (confirm('Are you sure you want to delete this note?')) {
        try {
          const response = await fetch('/delete-note', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: noteId })
          });
          if (response.ok) {
            const result = await response.json();
            console.log(result.message);
            const noteElement = document.getElementById(`note-${noteId}`);
            noteElement.remove();
            showToast('Note deleted successfully');
          } else {
            throw new Error('Failed to delete note');
          }
        } catch (error) {
          console.error('Error deleting note:', error);
          alert('An error occurred while deleting the note.');
        }
      }
    }

    function showToast(message, bgColorClass) {
      const toastContainer = document.getElementById('toast-container');
      const toast = document.createElement('div');
      toast.className = `${bgColorClass} text-white p-4 rounded-lg shadow-lg`;
      toast.textContent = message;

      toastContainer.appendChild(toast);

      setTimeout(() => {
        toast.remove();
      }, 3000);
    }

    window.addEventListener('DOMContentLoaded', (event) => {
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.has('created')) {
        showToast('Note created successfully', 'bg-green-500');
        // Remove the 'created' parameter from the URL
        const url = new URL(window.location);
        url.searchParams.delete('created');
        window.history.replaceState({}, document.title, url);
      } else if (urlParams.has('updated')) {
        showToast('Note updated successfully', 'bg-yellow-500');
        // Remove the 'updated' parameter from the URL
        const url = new URL(window.location);
        url.searchParams.delete('updated');
        window.history.replaceState({}, document.title, url);
      } else if (urlParams.has('deleted')) {
        showToast('Note deleted successfully', 'bg-red-500');
        // Remove the 'deleted' parameter from the URL
        const url = new URL(window.location);
        url.searchParams.delete('deleted');
        window.history.replaceState({}, document.title, url);
      }
    });

      // Event listener to remove red mark when notifications link is clicked
  document.getElementById('notifications-link').addEventListener('click', function() {
    removeRedMark(); // Call function to remove the red mark
  });

  // Function to remove red mark
  function removeRedMark() {
    const redMark = document.querySelector('.bg-red-500'); // Select the red mark element
    if (redMark) {
      redMark.remove(); // Remove the red mark element
    }
  }

  </script>
</body>

</html>